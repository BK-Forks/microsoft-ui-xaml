// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "Expander.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(Expander)
}

#include "Expander.g.cpp"

GlobalDependencyProperty ExpanderProperties::s_IsExpandedProperty{ nullptr };
GlobalDependencyProperty ExpanderProperties::s_PlaceholderProperty{ nullptr };

ExpanderProperties::ExpanderProperties()
{
    EnsureProperties();
}

void ExpanderProperties::EnsureProperties()
{
    if (!s_IsExpandedProperty)
    {
        s_IsExpandedProperty =
            InitializeDependencyProperty(
                L"IsExpanded",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::Expander>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(false),
                winrt::PropertyChangedCallback(&OnIsExpandedPropertyChanged));
    }
    if (!s_PlaceholderProperty)
    {
        s_PlaceholderProperty =
            InitializeDependencyProperty(
                L"Placeholder",
                winrt::name_of<winrt::IInspectable>(),
                winrt::name_of<winrt::Expander>(),
                false /* isAttached */,
                ValueHelper<winrt::IInspectable>::BoxedDefaultValue(),
                nullptr);
    }
}

void ExpanderProperties::ClearProperties()
{
    s_IsExpandedProperty = nullptr;
    s_PlaceholderProperty = nullptr;
}

void ExpanderProperties::OnIsExpandedPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::Expander>();
    winrt::get_self<Expander>(owner)->OnIsExpandedPropertyChanged(args);
}

void ExpanderProperties::IsExpanded(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<Expander*>(this)->SetValue(s_IsExpandedProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool ExpanderProperties::IsExpanded()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<Expander*>(this)->GetValue(s_IsExpandedProperty));
}

void ExpanderProperties::Placeholder(winrt::IInspectable const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<Expander*>(this)->SetValue(s_PlaceholderProperty, ValueHelper<winrt::IInspectable>::BoxValueIfNecessary(value));
    }
}

winrt::IInspectable ExpanderProperties::Placeholder()
{
    return ValueHelper<winrt::IInspectable>::CastOrUnbox(static_cast<Expander*>(this)->GetValue(s_PlaceholderProperty));
}
